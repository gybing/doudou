<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="Message">

    <typeAlias alias="Message" type="doudou.vo.Message" />

	<resultMap class="Message" id="MessageResult">
		<result property="title" column="title"/>
		<result property="content" column="content"/>
		<result property="userId" column="userId"/>
		<result property="atChildList" column="atChildList"/>
		<result property="publishTime" column="publishTime"/>
		<result property="publishLevel" column="publishLevel"/>
		<result property="mustFeedBack" column="mustFeedBack" />
		<result property="available" column="available" />
		<result property="messageType" column="messageTypeId" select="Message.selectMessageType" />
	</resultMap>
	
    <select id="read" parameterClass="int" resultMap="MessageResult">
        select * from Message
        where
        id = #id#
        limit 1
    </select>
	
	<select id="selectMessageType" parameterClass="int" resultClass="DoudouInfoType">
    	select * from DoudouInfoType where id = #messageTypeId# and available = TRUE
    </select>
   
    <insert id="create" parameterClass="Message">
        insert into Message 
        (
        	title,
            content,
            userId,
            messageTypeId,
            atChildList,
            publishTime,
            publishLevel,
            mustFeedBack
        )
        values 
        (
        	#title#,
            #content#,
            #userId#,
            #messageTypeId#,
            #atChildList#,
            now(),
            #publishLevel#,
            #mustFeedBack#
        )
        <selectKey keyProperty="id" resultClass="int">
            SELECT last_insert_id() AS ID FROM Message limit 1
        </selectKey>
    </insert>
    
    <select id="getMessageListByClassIdList" parameterClass="Map" resultMap="MessageResult">
    	select SQL_CALC_FOUND_ROWS m.* from Message as m where m.id in ( 
    		select messageId from MessageClass 
    		where classId in 
	    	<iterate property="classIdList" open="(" close=")" conjunction=",  ">
	            #classIdList[]#
	        </iterate> 
    		group by messageId
    	)
    	limit #offset#, #count#
    </select>
    
    <select id="queryClassMessageList" parameterClass="Map" resultMap="MessageResult">
    	select SQL_CALC_FOUND_ROWS m.* from Message as m where m.id in ( 
    		select messageId from MessageClass 
    		where classId in 
	    	<iterate property="classIdList" open="(" close=")" conjunction=",  ">
	            #classIdList[]#
	        </iterate> 
    		group by messageId
    	)
    	<dynamic>
            <isNotNull prepend="AND" property="title">
                title like '%$title$%'
            </isNotNull>
            <isNotNull prepend="AND" property="publishLevel">
                publishLevel = #publishLevel#
            </isNotNull>
            <isNotEqual prepend="AND" property="userId" compareValue="-1">
            	userId = #userId#
            </isNotEqual>
            <isNotNull prepend="AND" property="beginTime">
                publishTime &gt;= #beginTime#
            </isNotNull>
            <isNotNull prepend="AND" property="endTime">
                publishTime &lt;= #endTime#
            </isNotNull>   
        </dynamic>
        and mustFeedBack = #mustFeedBack#
    	limit #offset#, #count#
    </select>
    
    <select id="readAll" resultClass="Message">
    	select SQL_CALC_FOUND_ROWS m.* FROM Message as m
    	limit 0,1;
    </select>
    
    <select id="getFoundRows" resultClass="int" >
		SELECT FOUND_ROWS()
	</select>
	
	<select id="getFeedBackCount" resultClass="int" parameterClass="int">
		select count(*) from MessageUser 
		where messageId = #messageId#
		and feedbackStatus = TRUE
	</select>
	
	<select id="getNotFeedBackCount" resultClass="int" parameterClass="int">
		select count(*) from MessageUser 
		where messageId = #messageId#
		and feedbackStatus = False
	</select>
	
	<select id="getReadCount" resultClass="int" parameterClass="int">
		select count(*) from MessageUser 
		where messageId = #messageId#
		and readStatus = TRUE
	</select>
	
	<select id="getNotReadCount" resultClass="int" parameterClass="int">
		select count(*) from MessageUser 
		where messageId = #messageId#
		and readStatus = False
	</select>
</sqlMap>